{"version":3,"file":"index.js","sources":["../src/utils/assertBrowserEnviroment.js","../src/stream.js","../src/utils/assertEventTarget.js","../src/dispatch.js","../src/receive.js"],"sourcesContent":["/** @format */\n\nexport const assertBrowserEnviroment = () =>\n  !(typeof process === \"object\" && String(process) === \"[object process]\");\n","/** @format */\n\nimport { assertBrowserEnviroment } from \"./utils/assertBrowserEnviroment.js\";\nimport { assertEventTarget } from \"./utils/assertEventTarget\";\n\nexport const stream = () => {\n  /**\n   * Run a enviroment test to assert that the enviroment is a browser, as stream will not work in a node enviroment.\n   */\n\n  if (!assertBrowserEnviroment()) {\n    throw new Error(\n      `Stream: Stream is only available in a browser enviroment.`\n    );\n  }\n\n  let eventTarget = window;\n\n  return {\n    eventTarget,\n    from(target) {\n      // Check if the passed target is a valid EventTarget instance and throw a TypeError if not,\n      // to ensure that the 'with' method receives a valid target.\n      if (!assertEventTarget(target)) {\n        throw new TypeError(\n          `StrÃ¦em: ${target} is not a valid target for a receiving or dispatching events.`\n        );\n      }\n\n      this.eventTarget = target;\n      return this;\n    },\n  };\n};\n","/** @format */\n\nexport const assertEventTarget = (element) => element instanceof EventTarget;\n","/** @format */\n\nimport { stream } from \"./stream.js\";\n\n/**\n *\n * @param  {...string} eventNames\n */\n\nexport const dispatch = (...eventNames) => {\n  return {\n    ...stream(),\n    eventNames,\n    with(payload, eventInit = {}) {\n      // Add the payload to the eventInit object.\n      eventInit.detail = payload;\n\n      eventNames.forEach((eventName) =>\n        this.eventTarget.dispatchEvent(new CustomEvent(eventName, eventInit))\n      );\n    },\n  };\n};\n","/** @format */\n\nimport { stream } from \"./stream.js\";\n\nexport const receive = (...eventNames) => {\n  return {\n    ...stream(),\n    eventNames,\n    then(callback, options) {\n      const eventHandler = (ev) => callback(ev);\n\n      eventNames.forEach((eventName) =>\n        this.eventTarget.addEventListener(eventName, eventHandler, options)\n      );\n\n      return () => {\n        eventNames.forEach((eventName) =>\n          this.eventTarget.removeEventListener(eventName, eventHandler, options)\n        );\n      };\n    },\n  };\n};\n"],"names":["stream","process","String","Error","eventTarget","window","from","target","EventTarget","TypeError","this","eventNames","with","payload","eventInit","detail","forEach","eventName","dispatchEvent","CustomEvent","then","callback","options","eventHandler","ev","addEventListener","removeEventListener"],"mappings":"oEAEO,MCGMA,EAAS,KAKpB,GDPqB,iBAAZC,SAA4C,qBAApBC,OAAOD,SCQtC,MAAM,IAAIE,MACR,6DAMJ,MAAO,CACLC,YAHgBC,OAIhBC,KAAKC,GAGH,KAAuBA,aCrBoCC,aDsBzD,MAAM,IAAIC,UACR,WAAWF,kEAKf,OADAG,KAAKN,YAAcG,EACZG,yBErBW,IAAIC,KACnB,IACFX,IACHW,WAAAA,EACAC,KAAKC,EAASC,EAAY,IAExBA,EAAUC,OAASF,EAEnBF,EAAWK,SAASC,GAClBP,KAAKN,YAAYc,cAAc,IAAIC,YAAYF,EAAWH,yBCd3C,IAAIH,KAClB,IACFX,IACHW,WAAAA,EACAS,KAAKC,EAAUC,GACb,MAAMC,EAAgBC,GAAOH,EAASG,GAMtC,OAJAb,EAAWK,SAASC,GAClBP,KAAKN,YAAYqB,iBAAiBR,EAAWM,EAAcD,KAGtD,KACLX,EAAWK,SAASC,GAClBP,KAAKN,YAAYsB,oBAAoBT,EAAWM,EAAcD"}